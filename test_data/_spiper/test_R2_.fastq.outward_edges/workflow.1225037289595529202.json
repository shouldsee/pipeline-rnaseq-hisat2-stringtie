{
  "version": "0.0.5",
  "comment": {
    "job": "<code object workflow at 0x7f2d8cd7f780, file \"/home/user/repos/pipeline-rnaseq-hisat2-stringtie/pipeline_rnaseq_hisat2_stringtie.py\", line 204>",
    "dotname": "pipeline_rnaseq_hisat2_stringtie.workflow",
    "arg_tuples": {
      "prefix": "spiper._types.File::File('/home/user/repos/pipeline-rnaseq-hisat2-stringtie/_temp_build/root.sample1')",
      "hisat2_cache_dir": "spiper._types.File::File('/home/user/repos/pipeline-rnaseq-hisat2-stringtie/_temp_build/root.hisat2')",
      "genome_fasta": "spiper._types.File::File('/home/user/repos/pipeline-rnaseq-hisat2-stringtie/_temp_build/root.get_fasta.fasta')",
      "genome_fasta_acc": "builtins.str::wuhan-ncov19",
      "gtf_file": "spiper._types.File::File('/home/user/repos/pipeline-rnaseq-hisat2-stringtie/_temp_build/root.get_genepred.gtf')",
      "fastq1": "spiper._types.File::File('/home/user/repos/pipeline-rnaseq-hisat2-stringtie/test_data/test_R1_.fastq')",
      "fastq2": "spiper._types.File::File('/home/user/repos/pipeline-rnaseq-hisat2-stringtie/test_data/test_R2_.fastq')",
      "_output": "builtins.list::[]"
    }
  },
  "modules": [
    [
      "orderedattrdict",
      "1.5.1"
    ],
    [
      "spiper",
      "0.0.5"
    ]
  ],
  "caller_dump": "",
  "ident": "gANdcQAoQ8x8AABqAAB0AQB8AgB8BAAbfAMAfAgAgwQAfQoAfAAAagAAdAIAfAEAfAYAfAcAfAgAgwUAfQoAfAAAagAAdAMAfAEAfAAAagQAZAEAGWoFAGoGAHwAAGoEAGQCABlqBQBqBwB8AABqBABkAgAZagUAaggAZwAAfAgAgwcAfQoAfAAAagAAdAkAfAEAfAAAagQAZAMAGWoFAGoKAHwIAIMEAAF8AABqAAB0CwB8AQB8AABqBABkBAAZagUAagoAfAUAfAgAgwUAAXwAAFNxAU5YEAAAAGpvYl9oaXNhdDJfaW5kZXhxAlgPAAAAam9iX3RyaW1tb21hdGljcQNYEAAAAGpvYl9oaXNhdDJfYWxpZ25xBFgQAAAAam9iX3BpY2FyZF9kZWR1cHEFY3NwaXBlci5fdHlwZXMKRmlsZQpxBlhKAAAAL2hvbWUvdXNlci9yZXBvcy9waXBlbGluZS1ybmFzZXEtaGlzYXQyLXN0cmluZ3RpZS9fdGVtcF9idWlsZC9yb290LnNhbXBsZTFxB4VxCIFxCUsASwCHcQpoBlhJAAAAL2hvbWUvdXNlci9yZXBvcy9waXBlbGluZS1ybmFzZXEtaGlzYXQyLXN0cmluZ3RpZS9fdGVtcF9idWlsZC9yb290Lmhpc2F0MnELhXEMgXENSwBLAIdxDmgGWFIAAAAvaG9tZS91c2VyL3JlcG9zL3BpcGVsaW5lLXJuYXNlcS1oaXNhdDItc3RyaW5ndGllL190ZW1wX2J1aWxkL3Jvb3QuZ2V0X2Zhc3RhLmZhc3RhcQ+FcRCBcRFHQdeMzBDAAABNM3eHcRJYDAAAAHd1aGFuLW5jb3YxOXETaAZYUwAAAC9ob21lL3VzZXIvcmVwb3MvcGlwZWxpbmUtcm5hc2VxLWhpc2F0Mi1zdHJpbmd0aWUvX3RlbXBfYnVpbGQvcm9vdC5nZXRfZ2VuZXByZWQuZ3RmcRSFcRWBcRZHQdebxec1pvFNuS+HcRdoBlhKAAAAL2hvbWUvdXNlci9yZXBvcy9waXBlbGluZS1ybmFzZXEtaGlzYXQyLXN0cmluZ3RpZS90ZXN0X2RhdGEvdGVzdF9SMV8uZmFzdHFxGIVxGYFxGkdB15u/sh2R+kpZQ1MAh3EbaAZYSgAAAC9ob21lL3VzZXIvcmVwb3MvcGlwZWxpbmUtcm5hc2VxLWhpc2F0Mi1zdHJpbmd0aWUvdGVzdF9kYXRhL3Rlc3RfUjJfLmZhc3RxcRyFcR2BcR5HQdebv7IfGzRKz65RAIdxH2Uu"
}